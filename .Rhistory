kegg <- enrichKEGG(go2@gene,
universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
keyType = "kegg",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
go2
go
summary(go2)
as.data.frame(go2)
as.data.frame(kegg)
data(geneList)
library(DOSE)
data(geneList)
names(geneList)
abs(geneList) > 2
gene <- names(geneList)[abs(geneList) > 2]
geneList
abs(geneList)
gene <- names(geneList)[abs(geneList) > 2]
kegg <- enrichKEGG(genes,
# universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
keyType = "kegg",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
gene.df = bitr(genes, fromType = "TAIR", toType = c("ENSEMBL", "SYMBOL"), OrgDb = org.At.tair.db)
gene.df = bitr(genes, fromType = "TAIR", toType = c("ENTREZID", "SYMBOL"), OrgDb = org.At.tair.db)
gene.df
kegg <- enrichKEGG(gene.df$ENTREZID,
# universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
keyType = "kegg",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
goplot(go2)
go2
setwd("D:/ACano-LAB/SingleCell/TOTEM/shinyTOTEM/shinyTOTEM")
input_genes = read.table("example.txt")
input_genes = read.table("example.txt")[,1]
genes = input_genes
gene.df = bitr(genes, fromType = "TAIR", toType = c("ENTREZID", "SYMBOL"), OrgDb = org.At.tair.db)
go<-enrichGO(gene = genes,
universe = keys(org.At.tair.db), # Include all genes
OrgDb = org.At.tair.db,
keyType = "TAIR",
ont = ontology, # biology process
pAdjustMethod= padjmethod,
pvalueCutoff= pvalcutoff,
qvalueCutoff= qvalcutoff)
go2 <- clusterProfiler::simplify(go, cutoff=0.7, by="p.adjust", select_fun=min) #remove redundant GO terms -> cutoff as in revigo
goplot(go2)
go2
go2 <- clusterProfiler::simplify(go, cutoff=0.7, by="p.adjust", select_fun=min) #remove redundant GO terms -> cutoff as in revigo
gnames = setReadable(go2, org.At.tair.db, keyType = "TAIR")
gene.df = bitr(genes, fromType = "TAIR", toType = c("ENTREZID", "SYMBOL"), OrgDb = org.At.tair.db)
gene.df
kegg <- enrichKEGG(genes,
# universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
# keyType = "kegg",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
genes
kegg <- enrichKEGG(genes,
universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
# keyType = "kegg",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg
enrichWP(genes, organism = "Arabidopsis thaliana")
genes
enrichWP(gene.df$ENTREZID , organism = "Arabidopsis thaliana")
pathway = enrichWP(gene.df$ENTREZID ,
organism = "Arabidopsis thaliana",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
pathway
gene.df <- bitr(genes, fromType = "TAIR",
toType = c("ENTREZID", "SYMBOL"),
OrgDb = org.Hs.eg.db)
gene.df <- bitr(genes, fromType = "TAIR",
toType = c("ENTREZID", "SYMBOL"),
OrgDb = org.At.tair.db)
pathway
barplot(pathway, showCategory=20)
barplot(kegg, showCategory=20)
kegg
barplot(go2, showCategory=20)
barplot(kegg, showCategory=20)
treeplot(go2)
go2x = pairwise_termsim(go2)
treeplot(go2x)
go2x = pairwise_termsim(go)
treeplot(go2x)
go2x = pairwise_termsim(go2)
treeplot(go2x, geneClusterPanel = "pie")
treeplot(go2x, label_format = 10)
treeplot(go2x, label_format = 50)
treeplot(go2x, label_format = 10)
treeplot(go2x, cex_category = 2, label_format = 10)
treeplot(go2x, cex_category = 1, label_format = 10)
treeplot(go2x, offset = 2, label_format = 10)
treeplot(go2x, offset = 5, label_format = 10)
treeplot(go2x, offset = 4, label_format = 10)
treeplot(go2x, offset = 4, label_format = 20)
treeplot(go2x, offset = 4, label_format = 10)
treeplot(go2x, offset = 4, offset_tiplab = 1, label_format = 10)
treeplot(go2x, offset = 4, offset_tiplab = 3, label_format = 10)
treeplot(go2x, offset = 4,label_format = 10)
treeplot(go2x, offset = 4,label_format = 10)
treeplot(go2x, offset = 4,label_format = 20)
treeplot(go2x, offset = 4,label_format = 10)
kegg
kegg@result$ID
kegg <- enrichKEGG(genes,
universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg
View(kegg)
kegg
View(kegg)
kegg <- enrichKEGG(genes,
universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
pathway = enrichWP(gene.df$ENTREZID ,
organism = "Arabidopsis thaliana",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
pathway
kegg
kegg <- enrichKEGG(genes,
universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg@result[["Description"]]
dotkegg = dotplot(kegg, showCategory=20,x = "Count") + ggtitle(paste0("B) KEGG in ", specie))+scale_color_gradient(low = "dark red", high = "beige")
dotplot(kegg, showCategory=20,x = "Count")
dotplot(kegg, x = "Count")
go2x = pairwise_termsim(kegg)
treeplot(go2x, offset = 4,label_format = 10)
go2x
pairwise_termsim(kegg)
go2x = pairwise_termsim(kegg)
treeplot(go2x, offset = 4,label_format = 10)
as.data.frame(kegg)
kegg@result
as.data.frame(kegg)$ID
browseKEGG(kegg, as.data.frame(kegg)$ID[1])
BiocManager::install("pathview")
pathway = enrichWP(gene.df$ENTREZID ,
organism = "Arabidopsis thaliana",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
setwd("D:/ACano-LAB/SingleCell/TOTEM/shinyTOTEM/shinyTOTEM/functions")
BiocManager::install("pathview")
library("pathview")
pathview(genes, as.data.frame(kegg)$ID[1], species = "ath")
pathview(gene.df$ENTREZID, as.data.frame(kegg)$ID[1], species = "ath")
pathview(gene.df$ENTREZID, pathway.id = as.data.frame(kegg)$ID[1], species = "ath")
pathview(genes, pathway.id = as.data.frame(kegg)$ID[1], species = "ath")
keggview.graph((gene.df$ENTREZID, pathway.id = as.data.frame(kegg)$ID[1], species = "ath")
kegg@result
if(nrow(as.data.frame(go2)) != 0){
# Create plots
dotgo = dotplot(go2, showCategory=20, x = "Count") + ggtitle(paste0("A) GOEA in ", specie)) + scale_color_gradient(low = "dark red", high = "beige")
dotkegg = dotplot(kegg, showCategory=20,x = "Count") + ggtitle(paste0("B) KEGG in ", specie))+scale_color_gradient(low = "dark red", high = "beige")
cnet = cnetplot(gnames, showCategory = 20, circular = F, colorEdge = T)+ ggtitle(paste0("C) GOEA: network with genes in ", specie))
emap = emapplot(pairwise_termsim(go2), showCategory = 20)+ ggtitle(paste0("D) GOEA: network in ", specie))+ scale_color_gradient(low='dark red', high='beige')
# Output file
png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
# return(wrap_plots(dotgo, dotkegg, cnet, emap))
print(wrap_plots(dotgo, dotkegg, cnet, emap))
# Close device and save png image
dev.off()
}
else{
# Output file
png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("No GO enrichment for this set of genes.\n"),
cex = 1.6, col = "black")
dev.off()
}
}
else{
# Output file
png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a GO enrichment analysis.\n"),
cex = 1.6, col = "black")
dev.off()
}
# stop("Try other set of genes or parameters")
}
keggview.graph(gene.df$ENTREZID, pathway.id = as.data.frame(kegg)$ID[1], species = "ath")
pathview(gene.df$ENTREZID, pathway.id = as.data.frame(kegg)$ID[1], species = "ath", kegg.dir = "pp")
see_pathview <- function(..., save_image = FALSE)
{
msg <- capture.output(pathview::pathview(...), type = "message")
msg <- grep("image file", msg, value = T)
filename <- sapply(strsplit(msg, " "), function(x) x[length(x)])
img <- png::readPNG(filename)
grid::grid.raster(img)
if(!save_image) invisible(file.remove(filename))
}
see_pathview(gene.df$ENTREZID, pathway.id = as.data.frame(kegg)$ID[1], species = "ath", out.suffix = "pp")
see_pathview(gene.df$ENTREZID, pathway.id = as.data.frame(kegg)$ID[1], species = "ath", out.suffix = "pp")+
ggtitle(paste0("Gene expression of genes related to ", as.data.frame(kegg)$ID[1]))
see_pathview(gene.df$ENTREZID, pathway.id = as.data.frame(kegg)$ID[1], species = "ath", out.suffix = "pp")
see_pathview(gene.df$ENTREZID, pathway.id = as.data.frame(kegg)$ID[1], species = "ath")
pathway
as.data.frame(kegg)
heatplot(kegg)
heatplot(kegg, color = "lightgreen")
heatplot(kegg, col = "lightgreen")
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"),
cex = 1.6, col = "black")
# dev.off()
}
# Output file
# png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"),
cex = 1.6, col = "black")
# Output file
# png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
par(mar = c(0,0,0,0))
a = plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
a = text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"),
a =      cex = 1.6, col = "black")
a = text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"),
cex = 1.6, col = "black")
# Output file
# png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
par(mar = c(0,0,0,0))
a = plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
a = text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"),
cex = 1.6, col = "black")
a = plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
a = text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"), cex = 1.6, col = "black")
a
# Output file
# png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
par(mar = c(0,0,0,0))
# Output file
# png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
par(mar = c(0,0,0,0))
a = plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
a = text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"), cex = 1.6, col = "black")
a
a = plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')+
text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"), cex = 1.6, col = "black")
# Output file
# png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')+
text(x = 0.5, y = 0.5, paste("Please try a set > 2 genes for a KEGG enrichment analysis.\n"), cex = 1.6, col = "black")
runApp('D:/ACano-LAB/SingleCell/TOTEM/shinyTOTEM/shinyTOTEM')
runApp('D:/ACano-LAB/SingleCell/TOTEM/shinyTOTEM/shinyTOTEM')
input_genes = c("AT5G66400", "AT3G28920", "AT1G29600")
go<-enrichGO(gene = genes,
universe = keys(org.At.tair.db), # Include all genes
OrgDb = org.At.tair.db,
keyType = "TAIR",
ont = ontology, # biology process
pAdjustMethod= padjmethod,
pvalueCutoff= pvalcutoff,
qvalueCutoff= qvalcutoff)
go2 <- clusterProfiler::simplify(go, cutoff=0.7, by="p.adjust", select_fun=min) #remove redundant GO terms -> cutoff as in revigo
gnames = setReadable(go2, org.At.tair.db, keyType = "TAIR")
as.data.frame(go2)
# Create plots
dotgo = dotplot(go2, showCategory=20, x = "Count") + ggtitle(paste0("A) GOEA in ", specie)) + scale_color_gradient(low = "dark red", high = "beige")
specie = "Arabidopsis"
# Create plots
dotgo = dotplot(go2, showCategory=20, x = "Count") + ggtitle(paste0("A) GOEA in ", specie)) + scale_color_gradient(low = "dark red", high = "beige")
cnet = cnetplot(gnames, showCategory = 20, circular = F, colorEdge = T)+ ggtitle(paste0("B) GOEA: GO terms network with genes in ", specie))
emap = emapplot(pairwise_termsim(go2), showCategory = 20)+ ggtitle(paste0("C) GOEA: GO terms network in ", specie))+ scale_color_gradient(low='dark red', high='beige')
dotgo+cnet+emap
genes = input_genes
go<-enrichGO(gene = genes,
universe = keys(org.At.tair.db), # Include all genes
OrgDb = org.At.tair.db,
keyType = "TAIR",
ont = ontology, # biology process
pAdjustMethod= padjmethod,
pvalueCutoff= pvalcutoff,
qvalueCutoff= qvalcutoff)
go2 <- clusterProfiler::simplify(go, cutoff=0.7, by="p.adjust", select_fun=min) #remove redundant GO terms -> cutoff as in revigo
gnames = setReadable(go2, org.At.tair.db, keyType = "TAIR")
as.data.frame(go2)
# Create plots
dotgo = dotplot(go2, showCategory=20, x = "Count") + ggtitle(paste0("A) GOEA in ", specie)) + scale_color_gradient(low = "dark red", high = "beige")
cnet = cnetplot(gnames, showCategory = 20, circular = F, colorEdge = T)+ ggtitle(paste0("B) GOEA: GO terms network with genes in ", specie))
emap = emapplot(pairwise_termsim(go2), showCategory = 20)+ ggtitle(paste0("C) GOEA: GO terms network in ", specie))+ scale_color_gradient(low='dark red', high='beige')
runApp('D:/ACano-LAB/SingleCell/TOTEM/shinyTOTEM/shinyTOTEM')
runApp('D:/ACano-LAB/SingleCell/TOTEM/shinyTOTEM/shinyTOTEM')
normalizePath("GOplots.png")
outputfile
outputfile = "GOplots.png"
setwd("D:/ACano-LAB/SingleCell/TOTEM/shinyTOTEM/shinyTOTEM")
# Output file
png(filename = outputfile, width = 60,height = 30,units = "cm",res=800)
print(dotgo+cnet+emap)
# Close device and save png image
dev.off()
# Close device and save png image
dev.off()
kegg <- enrichKEGG(genes,
universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg <- enrichKEGG(genes,
# universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
## KEGG plots
genes.df = bitr(genes, fromType = "TAIR",toType = c("ENTREZID", "SYMBOL"),OrgDb = org.At.tair.db)
kegg <- enrichKEGG(genes.df$ENTREZID,
universe = keys(org.At.tair.db), # Include all genes
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg <- enrichKEGG(genes.df$ENTREZID,
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
genes
keys(org.At.tair.db)
kegg <- enrichKEGG(genes,
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg <- enrichKEGG(genes,
organism = "arabidopsis",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg <- enrichKEGG(genes,
organism = "arabidopsis",
readable     = TRUE,
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg <- enrichKEGG(genes,
organism = "arabidopsis",
use_internal_data = TRUE,
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
kegg <- enrichKEGG(genes,
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
length(genes)
kegg <- enrichKEGG(genes,
organism = "ath",
pAdjustMethod = padjmethod,
pvalueCutoff  = pvalcutoff,
qvalueCutoff  = qvalcutoff)
traceback()
genes
padjmethod
runApp()
runApp()
