unlist(sapply(strsplit(list.dirs(path = normalizePath("./experiments"), full.names = FALSE, recursive = FALSE), "_"), paste, collapse=" "))
runApp()
runApp()
organisms_list
runApp()
runApp()
# Layout
fluidRow(
column(width = 4,
lapply(strsplit(list.dirs(path = normalizePath("./experiments"), full.names = FALSE, recursive = FALSE), "_"), paste, collapse = " ")
## Select specie
selectInput(
lapply(strsplit(list.dirs(path = normalizePath("./experiments"), full.names = FALSE, recursive = FALSE), "_"), paste, collapse = " ")
runApp()
runApp()
## Create a list of available experiment within each organism (remove "_" from the name to be show, it's clearer)
orgs <<- sort(list.dirs(normalizePath("./experiments"),full.names = FALSE,recursive = FALSE))
orgs_list <<- as.list(orgs)
names(orgs_list) <<- unlist(lapply(strsplit(list.dirs(path = normalizePath("./experiments"), full.names = FALSE, recursive = FALSE), "_"), paste, collapse = " "))
orgs_list
unlist(lapply(strsplit(list.dirs(path = normalizePath("./experiments"), full.names = FALSE, recursive = FALSE), "_"), paste, collapse = " "))
names(orgs_list) <<- unlist(lapply(strsplit(list.dirs(path = normalizePath("./experiments"), full.names = FALSE, recursive = FALSE), "_"), paste, collapse = " "))
names(orgs_list)
## Create a list of available experiment within each organism (remove "_" from the name to be show, it's clearer)
exps <<- sort(list.dirs(normalizePath(paste("./experiments",input$specie,sep = "/")),full.names = FALSE,recursive = FALSE), decreasing = T)
exps_list <<- as.list(exps)
names(exps_list) <<- unlist(lapply(strsplit(exps, split = rep("_", length(exps))), paste, collapse = " "))
exps
orgs
unlist(lapply(strsplit(orgs, "_"), paste, collapse = " "))
orgs_list
names(orgs_list) = unlist(lapply(strsplit(orgs, "_"), paste, collapse = " "))
orgs_list
as.list(orgs)
orgs
(lapply(strsplit(orgs, "_"), paste, collapse = " "))
names(orgs_list) = (lapply(strsplit(orgs, "_"), paste, collapse = " "))
orgs_list
list(lapply(strsplit(orgs, "_"), paste, collapse = " "))
names(orgs_list) = list(lapply(strsplit(orgs, "_"), paste, collapse = " "))
orgs_list
names(orgs_list) = (lapply(strsplit(orgs, "_"), paste, collapse = " "))
orgs_list
(lapply(strsplit(orgs, "_"), paste, collapse = " "))
names(orgs_list) = lapply((lapply(strsplit(orgs, "_"), paste, collapse = " ")), as.vector)
orgs_list
orgs_list
names(orgs_list) = lapply((lapply(strsplit(orgs, "_"), paste, collapse = " ")), as.list)
orgs_list
## Create a list of available experiment within each organism (remove "_" from the name to be show, it's clearer)
orgs <<- sort(list.dirs(normalizePath("./experiments"),full.names = FALSE,recursive = FALSE))
orgs_list <<- as.list(orgs)
names(orgs_list) = lapply((lapply(strsplit(orgs, "_"), paste, collapse = " ")), as.list)
orgs_list
names(orgs_list) = (lapply(strsplit(orgs, "_"), paste, collapse = " "))
orgs_list = lapply(orgs_list, as.list)
orgs_list
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# LOAD AN R DATA
load(paste(experiment_path,"data.RData",sep = "/"))
# RUN ENRICHMENT
source("functions/tissue_enrichment.R")
experiment_path
View(mybarplot)
runApp()
experiment_path
enrichment_resultsUI <- function(id) {
# Layout
fluidPage(
column(width = 6,offset = 6,align = "center",
# Output Barlplot
imageOutput(outputId = NS(id,"barplot"), inline = TRUE),
fluidRow(
# Select color
selectInput(inputId = NS(id, "color_barplot"),
label = "Change color",
choices = c("salmon","steelblue","olivedrab"),
multiple = FALSE),
# Download button
downloadButton(outputId = NS(id,"download_barplot"))
)
)
)
}
enrichment_resultsServer <- function(id, experiment_path,user_description,experiment_id,specie,user_genelist,fc_button) {
moduleServer(id, function(input,output,session) {
# USER DESCRIPTION
## Save the experiment description provided by the user. If not provided, save experiment ID and date for file name in downloads
if(user_description == "Enter a description for your gene list (optional)"){
# description<<-"CHANGE"
description_exp<-paste(specie, experiment_id, "experiment \n", Sys.time(),sep = " ")
}
else(
description_exp<-user_description
)
# add user provided description
output$description_exp <- renderText({
return(description_exp)
})
# LOAD AN R DATA
load(paste(experiment_path,"data.RData",sep = "/"))
# RUN ENRICHMENT
source("functions/tissue_enrichment.R")
enrichment_values_internal <- tissue_enrichment(user_genelist=user_genelist,
tissue_atlas=tissue_atlas,
geneuniverse=geneuniverse)
# GENERATE BARPLOT
observeEvent(input$color_barplot, {
# Output file
# png("./enrichment_result_barplot.png",height = 18,width = 18,units = "cm",res=400)
# par(mar=c(11,4,4,4))
# Barplot
# bar<-barplot(height = enrichment_values_internal,
#              beside = TRUE,cex.names = 0.6,las=2,
#              ylab = "-log(p-value)",
#              ylim = c(0,ceiling(max(enrichment_values_internal))),
#              main = paste(specie, experiment_id, "enrichment results", sep = " "),
#              col = input$color_barplot
# )
bar<- mybarplot(enrichment_values_internal, input$color_barplot, output = "./enrichment_result_barplot.png")
# Add significative threshold line in 0.05 pval:
# abline(h=(-log10(0.05)),lty=2,col="tomato")
# Close devidce and save png image
# dev.off()
# plot the image saved of barplot
output$barplot <- renderImage(
{
# Read image
filename <-normalizePath("./enrichment_result_barplot.png")
list(src=filename,
width="70%",
height="70%")
}, deleteFile = FALSE
)
})
## Download button for barplot
#filename
filename = c(gsub(" ", "_", gsub(":",".",description_exp), fixed = TRUE) # User description / Specie_Experiment / Date (replace : by ; -> invalid filename)
)
#download button
output$download_barplot <- downloadHandler(
filename = function(){
paste(paste("EnrichmentBarplot", filename, sep = "_"), "png", sep = ".")
},
content = function(file) {
file.copy("enrichment_result_barplot.png", file)
}, contentType = "image/png")
## Functional characterization button
observeEvent(input$func_char_tiss,{
fc_button$func_char_tiss <- input$func_char_tiss #increment fc_button
})
# RETURN ENRICHMENT VECTOR
list(
enrichment_values=reactive({enrichment_values_internal})
)
})
}
View(mybarplot)
View(mybarplot2)
experiment_path
experiment_path = "C:\\Users\\vered\\OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB\\ACano-LAB\\SingleCell\\TOTEM\\shinyTOTEM_actual\\shinyTOTEM_CRAG\\totem\\experiments\\Arabidopsis thaliana\\Root_SingleCell"
# LOAD AN R DATA
load(paste(experiment_path,"data.RData",sep = "/"))
View(mybarplot2)
View(mybarplot)
View(mybarplot2)
runApp()
runApp()
function(myvector,color,outputfile) {
# Output file
png(filename = outputfile,width = 18,height = 18,units = "cm",res=300)
# Barplot
par(mar=c(11,4,4,4))
bar<-barplot(myvector,beside = TRUE,cex.names = 0.8,las=2,
ylab = "-log(p-value)",
ylim = c(0,ceiling(max(myvector)*1.25)),
main = "Arabidopsis root single cell populations enrichment results",
col = as.character(color)
)
title(xlab = "Cell populations",line = -2,outer = TRUE)
# Separate groups of tissues
abline(v=c(mean(bar[6:7,]),
mean(bar[8:9,]),
mean(bar[14:15,]),
mean(bar[19:20,]),
mean(bar[21:22,]),
mean(bar[28:29,]),
mean(bar[30:31,]),
mean(bar[33:34,]),
mean(bar[40:41,])),
lty=2,col="gray55")
# Add significative threshold line:
abline(h=3,lty=2,col="tomato")
# Add nice - user understandable labels
## labels<-all_markers$Tissue
labels<-c( "Stem cell niche", #6
"Root cap",  #8
"Phloem", #14
"Xylem",  #19
"Procambium", #21
"Pericycle", #28
"Endodermis", #30
"Cortex", #33
"Epidermis", #40
"Lateral Root Primordia")
text(x = bar[c(3,7,11,17,20,25,29,32,37,42)],
y = max(myvector)*0.8,
labels = labels,cex = 0.75,srt=90,font = 4,adj=0)
}
load("C:/Users/vered/OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB/ACano-LAB/SingleCell/TOTEM/shinyTOTEM_actual/shinyTOTEM_CRAG/totem/experiments/Arabidopsis thaliana/Leaf_SingleCell/data.RData")
rm(mybarplot())
rm(mybarplot
)
View(firstup)
View(mybarplot2)
mybarplot2 <- function(myvector,color,outputfile) {
# Barplot
par(mar=c(11,4,4,4))
bar<-barplot(myvector,beside = TRUE,cex.names = 0.8,las=2,
ylab = "-log(p-value)",
ylim = c(0,ceiling(max(myvector)*1.25)),
main = "Arabidopsis leaf single cell populations enrichment results",
col = as.character(color)
)
title(xlab = "Cell populations",line = -2,outer = TRUE)
# Separate groups of tissues
abline(v=c(mean(bar[3:4,]),
mean(bar[7:8,]),
mean(bar[13:14,]),
mean(bar[16:17,]),
mean(bar[18:19,]),
mean(bar[21:22,]),
mean(bar[28:29,]),
mean(bar[32:33,])),
lty=2,col="gray55")
# Add significative threshold line:
abline(h=-log10(0.05),lty=2,col="tomato")
# Add nice - user understandable labels
## labels<-all_markers$Tissue
labels<-c( "Epidermis", #3
"Guard cells",  #7
"Mesophyll", #13
"Myrosin idioblasts", #16
"Bundle sheath", #18
"Procambium", #21
"Phloem", #28
"Xylem", #32
"Hydathode") #34
text(x = bar[c(2,5,10,15,17,20,25,30,33)],
y = max(myvector)*0.8,
labels = labels,cex = 0.75,srt=90,font = 4,adj=0)
}
View(mybarplot2)
save.image("C:/Users/vered/OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB/ACano-LAB/SingleCell/TOTEM/shinyTOTEM_actual/shinyTOTEM_CRAG/totem/experiments/Arabidopsis thaliana/Leaf_SingleCell/data.RData")
runApp()
# LOAD AN R DATA
load(paste(experiment_path,"data.RData",sep = "/"))
View(mybarplot2)
myvector
View(x)
mybarplot2 <- function(myvector,color,outputfile) {
# Barplot
par(mar=c(11,4,4,4))
bar<-barplot(myvector,beside = TRUE,cex.names = 0.8,las=2,
ylab = "-log(p-value)",
ylim = c(0,ceiling(max(myvector)*1.25)),
main = "Arabidopsis leaf single cell populations enrichment results",
col = as.character(color)
)
title(xlab = "Cell populations",line = -2,outer = TRUE)
# Separate groups of tissues
abline(v=c(mean(bar[3:4,]),
mean(bar[7:8,]),
mean(bar[13:14,]),
mean(bar[16:17,]),
mean(bar[18:19,]),
mean(bar[21:22,]),
mean(bar[28:29,]),
mean(bar[32:33,])),
lty=max(myvector)+0.2,col="gray55")
# Add significative threshold line:
abline(h=-log10(0.05),lty=2,col="tomato")
# Add nice - user understandable labels
## labels<-all_markers$Tissue
labels<-c( "Epidermis", #3
"Guard cells",  #7
"Mesophyll", #13
"Myrosin idioblasts", #16
"Bundle sheath", #18
"Procambium", #21
"Phloem", #28
"Xylem", #32
"Hydathode") #34
text(x = bar[c(2,5,10,15,17,20,25,30,33)],
y = max(myvector)*0.8,
labels = labels,cex = 0.75,srt=90,font = 4,adj=0)
}
load("C:/Users/vered/OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB/ACano-LAB/SingleCell/TOTEM/shinyTOTEM_actual/shinyTOTEM_CRAG/totem/experiments/Arabidopsis thaliana/Leaf_SingleCell/data.RData")
mybarplot2 <- function(myvector,color,outputfile) {
# Barplot
par(mar=c(11,4,4,4))
bar<-barplot(myvector,beside = TRUE,cex.names = 0.8,las=2,
ylab = "-log(p-value)",
ylim = c(0,ceiling(max(myvector)*1.25)),
main = "Arabidopsis leaf single cell populations enrichment results",
col = as.character(color)
)
title(xlab = "Cell populations",line = -2,outer = TRUE)
# Separate groups of tissues
abline(v=c(mean(bar[3:4,]),
mean(bar[7:8,]),
mean(bar[13:14,]),
mean(bar[16:17,]),
mean(bar[18:19,]),
mean(bar[21:22,]),
mean(bar[28:29,]),
mean(bar[32:33,])),
lty=max(myvector)+0.2,col="gray55")
# Add significative threshold line:
abline(h=-log10(0.05),lty=2,col="tomato")
# Add nice - user understandable labels
## labels<-all_markers$Tissue
labels<-c( "Epidermis", #3
"Guard cells",  #7
"Mesophyll", #13
"Myrosin idioblasts", #16
"Bundle sheath", #18
"Procambium", #21
"Phloem", #28
"Xylem", #32
"Hydathode") #34
text(x = bar[c(2,5,10,15,17,20,25,30,33)],
y = max(myvector)*0.8,
labels = labels,cex = 0.75,srt=90,font = 4,adj=0)
}
View(mybarplot2)
save.image("C:/Users/vered/OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB/ACano-LAB/SingleCell/TOTEM/shinyTOTEM_actual/shinyTOTEM_CRAG/totem/experiments/Arabidopsis thaliana/Leaf_SingleCell/data.RData")
runApp()
runApp()
View(mybarplot2)
load("C:/Users/vered/OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB/ACano-LAB/SingleCell/TOTEM/shinyTOTEM_actual/shinyTOTEM_CRAG/totem/experiments/Arabidopsis thaliana/Leaf_SingleCell/data.RData")
mybarplot2 <- function(myvector,color,outputfile) {
# Barplot
par(mar=c(11,4,4,4))
bar<-barplot(myvector,beside = TRUE,cex.names = 0.8,las=2,
ylab = "-log(p-value)",
ylim = c(0,ceiling(max(myvector)*1.25)),
main = "Arabidopsis leaf single cell populations enrichment results",
col = as.character(color)
)
title(xlab = "Cell populations",line = -2,outer = TRUE)
# Separate groups of tissues
abline(v=c(mean(bar[3:4,]),
mean(bar[7:8,]),
mean(bar[13:14,]),
mean(bar[16:17,]),
mean(bar[18:19,]),
mean(bar[21:22,]),
mean(bar[28:29,]),
mean(bar[32:33,])),
lty=2,col="gray55")
# Add significative threshold line:
abline(h=-log10(0.05),lty=2,col="tomato")
# Add nice - user understandable labels
## labels<-all_markers$Tissue
labels<-c( "Epidermis", #3
"Guard cells",  #7
"Mesophyll", #13
"Myrosin idioblasts", #16
"Bundle sheath", #18
"Procambium", #21
"Phloem", #28
"Xylem", #32
"Hydathode") #34
text(x = bar[c(2,5,10,15,17,20,25,30,33)],
y = max(myvector)+0.5,
labels = labels,cex = 0.75,srt=90,font = 4,adj=0)
}
save.image("C:/Users/vered/OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB/ACano-LAB/SingleCell/TOTEM/shinyTOTEM_actual/shinyTOTEM_CRAG/totem/experiments/Arabidopsis thaliana/Leaf_SingleCell/data.RData")
View(mybarplot2)
runApp()
View(mybarplot2)
load("C:/Users/vered/OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB/ACano-LAB/SingleCell/TOTEM/shinyTOTEM_actual/shinyTOTEM_CRAG/totem/experiments/Arabidopsis thaliana/Leaf_SingleCell/data.RData")
mybarplot2 <- function(myvector,color,outputfile) {
# Barplot
par(mar=c(11,4,4,4))
bar<-barplot(myvector,beside = TRUE,cex.names = 0.8,las=2,
ylab = "-log(p-value)",
ylim = c(0,ceiling(max(myvector)*1.25)),
main = "Arabidopsis leaf single cell populations enrichment results",
col = as.character(color),
)
title(xlab = "Cell populations",line = -2,outer = TRUE)
# Separate groups of tissues
abline(v=c(mean(bar[3:4,]),
mean(bar[7:8,]),
mean(bar[13:14,]),
mean(bar[16:17,]),
mean(bar[18:19,]),
mean(bar[21:22,]),
mean(bar[28:29,]),
mean(bar[32:33,])),
lty=2,col="gray55")
# Add significative threshold line:
abline(h=-log10(0.05),lty=2,col="tomato")
# Add nice - user understandable labels
## labels<-all_markers$Tissue
labels<-c( "Epidermis", #3
"Guard cells",  #7
"Mesophyll", #13
"Myrosin idioblasts", #16
"Bundle sheath", #18
"Procambium", #21
"Phloem", #28
"Xylem", #32
"Hydathode") #34
text(x = bar[c(2,5,10,15,17,20,25,30,33)],
y = max(myvector)+0.5,
labels = labels,cex = 0.75,srt=90,font = 4,adj=0)
}
mybarplot2 <- function(myvector,color,outputfile) {
# Barplot
par(mar=c(11,4,4,4))
bar<-barplot(myvector,beside = TRUE,cex.names = 0.8,las=2,
ylab = "-log(p-value)",
ylim = c(0,ceiling(max(myvector)*1.25)),
main = "Arabidopsis leaf single cell populations enrichment results",
col = as.character(color), horiz = T
)
title(xlab = "Cell populations",line = -2,outer = TRUE)
# Separate groups of tissues
abline(v=c(mean(bar[3:4,]),
mean(bar[7:8,]),
mean(bar[13:14,]),
mean(bar[16:17,]),
mean(bar[18:19,]),
mean(bar[21:22,]),
mean(bar[28:29,]),
mean(bar[32:33,])),
lty=2,col="gray55")
# Add significative threshold line:
abline(h=-log10(0.05),lty=2,col="tomato")
# Add nice - user understandable labels
## labels<-all_markers$Tissue
labels<-c( "Epidermis", #3
"Guard cells",  #7
"Mesophyll", #13
"Myrosin idioblasts", #16
"Bundle sheath", #18
"Procambium", #21
"Phloem", #28
"Xylem", #32
"Hydathode") #34
text(x = bar[c(2,5,10,15,17,20,25,30,33)],
y = max(myvector)+0.5,
labels = labels,cex = 0.75,srt=90,font = 4,adj=0)
}
save.image("C:/Users/vered/OneDrive - CRAG - Centre de Recerca en Agrigenòmica - CSIC IRTA UAB UB/ACano-LAB/SingleCell/TOTEM/shinyTOTEM_actual/shinyTOTEM_CRAG/totem/experiments/Arabidopsis thaliana/Leaf_SingleCell/data.RData")
runApp()
runApp()
runApp()
experiment_id
runApp()
experiment_id = "Ara_root"
paste(strsplit(experiment_id, "_"),collapse=" ")
strsplit(experiment_id, "_")
paste(strsplit(experiment_id, "_")[[1]],collapse=" ")
runApp()
paste(specie, paste(strsplit(experiment_id, "_")[[1]],collapse=" "), "enrichment results", sep = " ")
runApp()
runApp()
runApp()
runApp()
runApp()
View(generate_color_scale)
color="tomato"
# Generate lineal color scale from white to color and assign
colfunc<-colorRampPalette(colors = c("white",color))
color_ramp<-colfunc(1001)
color_ramp
colfunc
runApp()
runApp()
viridis(1001)
library(viridis)
colorRampPalette(viridis(1001))
viridis(1001)
# Generate lineal color scale with viridis palette colors
colfunc<-viridis()
# Generate lineal color scale with viridis palette colors
colfunc<-viridis
color_ramp<-colfunc(1001)
color_ramp
runApp()
# Generate lineal color scale with viridis palette colors
colfunc<-viridis[:1]
viridis
runApp()
viridis(1001)
viridis(1001)[length(viridis(1001)):1]
runApp()
runApp()
color
# Generate lineal color scale from white to color and assign
colfunc<-colorRampPalette(colors = c("white",color))
color_ramp<-colfunc(1001)
legend.col(col = color_ramp, lev = enrich_values_norm)
